function filterByNestedProperty<T extends Record<string, any>>(
    list: T[],                             // Lista de objetos a serem filtrados
    propertyPath: (string | number)[],     // Caminho para a propriedade (ex: ["user", "id"])
    valueToMatch: any                      // Valor esperado dentro da propriedade
): T[] {
    return list.filter(item => {
        // Obtém o valor dentro do objeto na profundidade especificada
        const itemValue = getNestedValue(item, propertyPath);
        return itemValue === valueToMatch; // Retorna apenas os itens que correspondem ao valor
    });
}

// Função auxiliar para acessar valores em estruturas aninhadas
function getNestedValue<T extends Record<string, any>>(obj: T, path: (string | number)[]): any {
    return path.reduce((acc, key) => acc && acc[key], obj);
}


const data = [
    { id: 1, user: { id: 10, name: "Alice" }, task: "Fazer café" },
    { id: 2, user: { id: 20, name: "Bob" }, task: "Responder emails" },
    { id: 3, user: { id: 10, name: "Alice" }, task: "Atualizar planilha" }
];

const filteredData = filterByNestedProperty(data, ["user", "id"], 10);
console.log(filteredData);

// Resultado esperado:
// [
//   { id: 1, user: { id: 10, name: "Alice" }, task: "Fazer café" },
//   { id: 3, user: { id: 10, name: "Alice" }, task: "Atualizar planilha" }
// ]


// Função para trabalhar depois com muita paciencia é  uma filtragem inteligente.

function filterByNestedProperty<T extends Record<string, any>>(
    list: T[],                             // Lista de objetos a serem filtrados
    propertyPath: (string | number)[],     // Caminho para a propriedade (ex: ["user", "id"])
    valueToMatch: any,                     // Valor esperado dentro da propriedade
    options?: { isDate?: boolean, startDate?: string, endDate?: string } // Opções extras para datas
): T[] {
    return list.filter(item => {
        // Obtém o valor dentro do objeto na profundidade especificada
        const itemValue = getNestedValue(item, propertyPath);

        // Se estivermos lidando com datas, filtrar pelo intervalo de tempo
        if (options?.isDate && options.startDate && options.endDate) {
            const itemDate = new Date(itemValue);
            const start = new Date(options.startDate);
            const end = new Date(options.endDate);
            return itemDate >= start && itemDate <= end;
        }

        // Se não for uma data, apenas comparar o valor normalmente
        return itemValue === valueToMatch;
    });
}

// Função auxiliar para acessar valores em estruturas aninhadas
function getNestedValue<T extends Record<string, any>>(obj: T, path: (string | number)[]): any {
    return path.reduce((acc, key) => acc && acc[key], obj);
}


const data = [
    { id: 1, user: { id: 10, name: "Alice" }, createdAt: "2024-03-05" },
    { id: 2, user: { id: 20, name: "Bob" }, createdAt: "2024-03-07" },
    { id: 3, user: { id: 10, name: "Alice" }, createdAt: "2024-03-10" }
];

const filteredById = filterByNestedProperty(data, ["user", "id"], 10);
console.log(filteredById);
/* Resultado:
[
  { id: 1, user: { id: 10, name: "Alice" }, createdAt: "2024-03-05" },
  { id: 3, user: { id: 10, name: "Alice" }, createdAt: "2024-03-10" }
]
*/
